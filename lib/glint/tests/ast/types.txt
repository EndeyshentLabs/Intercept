================
Primitives
================
void :int;
0;
---
(block
 (cast (t_int))
 (return (integer_literal)))


================
FFI
================
void :cshort;
void :cushort;
void :cint;
void :cuint;
void :clong;
void :culong;
void :clonglong;
void :culonglong;
0;
---
(block
 (cast (t_ffi))
 (cast (t_ffi))
 (cast (t_ffi))
 (cast (t_ffi))
 (cast (t_ffi))
 (cast (t_ffi))
 (cast (t_ffi))
 (cast (t_ffi))
 (return (integer_literal)))


================
Fixed Array
================
void :[int 8];
0;
---
(block
 (cast (t_fixarray (evaluated_constant)))
 (return (integer_literal)))


================
Dynamic Array
================
void :[int];
0;
---
(block
 (cast (t_dynarray))
 (return (integer_literal)))


================
Dynamic Array Initial Size
================
size :: 69;
void :[byte size];
0;
---
(block
 (variable_declaration (integer_literal))
 (cast (t_dynarray (name)))
 (return (integer_literal)))


================
Struct, Empty
================
void struct {};
0;
---
(block
 (cast (t_struct))
 (return (integer_literal)))


================
Struct, Single Member
================
void struct { x: int };
0;
---
(block
 (cast (t_struct))
 (return (integer_literal)))


================
Struct, Two Members
================
void struct {
    x: int
    y:int
};
0;
---
(block
 (cast (t_struct))
 (return (integer_literal)))


================
Struct, Two Comma-separated Members
================
void struct {
    x: int,
    y:int
};
0;
---
(block
 (cast (t_struct))
 (return (integer_literal)))


================
Struct, Two Comma-separated Members w/ Trailing
================
void struct {
    x: int,
    y:int,
};
0;
---
(block
 (cast (t_struct))
 (return (integer_literal)))


================
Struct, Two Semicolon-separated Members
================
void struct {
    x: int;
    y:int;
};
0;
---
(block
 (cast (t_struct))
 (return (integer_literal)))


================
Union, Empty
================
void union {};
0;
---
(block
 (cast (t_union))
 (return (integer_literal)))


================
Union, Single Member
================
void union { x: int };
0;
---
(block
 (cast (t_union))
 (return (integer_literal)))


================
Union, Two Members
================
void union {
    x: int
    y:int
};
0;
---
(block
 (cast (t_union))
 (return (integer_literal)))


================
Union, Two Comma-separated Members
================
void union {
    x: int,
    y:int
};
0;
---
(block
 (cast (t_union))
 (return (integer_literal)))


================
Union, Two Comma-separated Members w/ Trailing
================
void union {
    x: int,
    y:int,
};
0;
---
(block
 (cast (t_union))
 (return (integer_literal)))


================
Union, Two Semicolon-separated Members
================
void union {
    x: int;
    y:int;
};
0;
---
(block
 (cast (t_union))
 (return (integer_literal)))


================
Function :int()
================
void :int();
0;
---
(block
 (cast (t_function))
 (return (integer_literal)))


================
Function, Named Parameter
================
void :int(s:int);
0;
---
(block
 (cast (t_function))
 (return (integer_literal)))


================
Function, Named Parameter, Trailing Comma
================
void :int(s:int,);
0;
---
(block
 (cast (t_function))
 (return (integer_literal)))


================
Function, Unnamed Parameter
================
void :int(:int);
0;
---
(block
 (cast (t_function))
 (return (integer_literal)))


================
Function, Multiple Named Parameters
================
void :int(x:int y:int);
0;
---
(block
 (cast (t_function))
 (return (integer_literal)))


================
Function, Multiple Named Comma-separated Parameters
================
void :int(x:int, y:int);
0;
---
(block
 (cast (t_function))
 (return (integer_literal)))


================
Function, Multiple Unnamed Parameters
================
void :int(:int :int);
0;
---
(block
 (cast (t_function))
 (return (integer_literal)))


================
Function, Multiple Unnamed Comma-separated Parameters
================
void :int(:int, :int);
0;
---
(block
 (cast (t_function))
 (return (integer_literal)))
