/// Top-level rule.
<file>           ::= { <expression> }

/// Expression.
<expression>     ::= <expr-decl>
                   | <expr-if>
                   | <expr-while>
                   | <expr-block>
                   | <expr-lambda>
                   | <expr-call>
                   | <expr-cast>
                   | <expr-subs>
                   | <expr-paren>
                   | <expr-prefix>
                   | <expr-binary>
                   | <expr-primary>

/// Declarations.
<expr-decl>      ::= <decl-start> <decl-rest>
<decl-start>     ::= IDENTIFIER ":"
<decl-rest>      ::= <type-function> <expr-block>
                   | <type> [ "=" <expression> ]
                   | <decl-start> EXT <type-function>

/// Other expressions.
<expr-if>        ::= IF <expression> <expr-block> [ ELSE <expr-block> ]
<expr-while>     ::= WHILE <expression> <expr-block>
<expr-block>     ::= "{" { <expression> } "}"
<expr-lambda>    ::= <type-function> <expr-block>
<expr-call>      ::= <expression> "(" { <expression> [ "," ] } ")"
<expr-cast>      ::= <type> <expression>
<expr-subs>      ::= <expression> "[" <expression> "]"
<expr-paren>     ::= "(" <expression> ")"
<expr-prefix>    ::= <prefix> <expression>
<expr-binary>    ::= <expression> <binary> <expression>
<expr-primary>   ::= NUMBER | IDENTIFIER

/// Types.
<type>           ::= <type-base> | <type-derived>
<type-base>      ::= [ "@" ] IDENTIFIER
<type-derived>   ::= <type-array> | <type-function>
<type-array>     ::= <type> "[" <expression> "]"
<type-function>  ::= <type> "(" { <param-decl> [ "," ]  } ")"
<param-decl>     ::= <decl-start> <type>

/// Miscellaneous.
<binary>         ::= /// All binary operators
<prefix>         ::= /// All unary prefix operators