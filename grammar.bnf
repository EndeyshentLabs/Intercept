/// Top-level rule.
<file> ::= <preamble> { [ <expr> ] ";" }

<preamble> ::= [ <module-declaration> ] { <import-declaration> | ";" }

<module-declaration> ::= "module" IDENTIFIER
<import-declaration> ::= "import" IDENTIFIER

/// TODO: Deproceduring

/// Expression.
<expr>        ::= <expr-call> | <expr-single>

/// Expression that is not a call.
<expr-single> ::= <expr-decl>
                | <expr-if>
                | <expr-for>
                | <expr-while>
                | <expr-block>
                | <expr-lambda>
                | <expr-cast>
                | <expr-subs>
                | <expr-paren>
                | <expr-return>
                | <expr-literal>
                | <expr-binary>
                | <expr-prefix>
                | <expr-primary>
                | EXPR

/// Declarations.
<expr-decl>      ::= <storage-specs> IDENTIFIER <decl-rest>
<decl-rest>      ::= <decl-var> | <decl-function> | <decl-type>
<decl-var>       ::= ":" <type> [ "=" <expr> ] | "::" <expr>
<decl-function>  ::= ":" <type-function> [ <function-body> ]
<decl-type>      ::= ":" <type-struct> | ":" TYPE "=" <type>

/// Other expressions.
<expr-if>        ::= IF <expr> THEN <expr> [ ELSE <expr> ]
<expr-while>     ::= WHILE <expr> DO <expr>
<expr-for>       ::= FOR <expr> "," <expr> "," <expr> DO <expr>
<expr-block>     ::= "{" { <expr> ";" } "}"
<expr-lambda>    ::= LAMBDA <type-function> <function-body>
<expr-call>      ::= <expr> { <expr-single> }
<expr-cast>      ::= <expr> ( AS | "as!" ) <type>
<expr-subs>      ::= <expr> "[" <expr> "]"
<expr-paren>     ::= "(" <expr> ")"
<expr-return>    ::= RETURN [ <expr> ]
<expr-literal>   ::= "[" { <expr-single> [ "," ] } "]"
<expr-prefix>    ::= <prefix> <expr>
<expr-binary>    ::= <expr> <binary> <expr>
<expr-primary>   ::= NUMBER | IDENTIFIER

/// Types.
///
/// Note that this grammar is technically incorrect as it doesnâ€™t
/// take precedence into account at all. For more information on
/// type precedence, see the comment in ParseType().
<type>           ::= <type-quals> <type-base> <type-rest> | "(" <type> ")"
<type-quals>     ::= { "@" | "&" }
<type-base>      ::= <type-struct> | <type-builtin> | IDENTIFIER | INT_TYPE
<type-struct>    ::= STRUCT <struct-body>
<type-builtin>   ::= INT | BYTE | BOOL | VOID
<type-rest>      ::= { <type-arr-sz> | <type-signature>  }
<type-arr-sz>    ::= "[" <expr> "]"
<type-signature> ::= "(" <param-decls> ")" <func-attrs>
<param-decls>    ::= { <param-decl> [ "," ]  }
<param-decl>     ::= [ IDENTIFIER { [ "," ] IDENTIFIER } ] ":" <type>
<func-attrs>     ::= /// All function attributes

/// Miscellaneous.
<storage-specs>  ::= [ EXPORT ] [ EXTERN ] [ STATIC ]
<type-function>  ::= <type-base> <type-signature>
<function-body>  ::= "=" <expr> | <expr-block>
<struct-body>    ::= "{" { <member-decl> } "}"
<member-decl>    ::= IDENTIFIER ":" <type> [ ";" ]
<binary>         ::= /// All binary operators
<prefix>         ::= /// All unary prefix operators