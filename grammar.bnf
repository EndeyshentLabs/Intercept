/// Top-level rule.
<file> ::= <preamble> { <expr> | ";" }

<preamble> ::= [ <module-declaration> ] { <import-declaration> | ";" }

<module-declaration> ::= "module" IDENTIFIER
<import-declaration> ::= "import" IDENTIFIER

/// Expression.
<expr>     ::= <expr-decl>
             | <expr-if>
             | <expr-for>
             | <expr-while>
             | <expr-block>
             | <expr-lambda>
             | <expr-call>
             | <expr-cast>
             | <expr-subs>
             | <expr-paren>
             | <expr-return>
             | <expr-literal>
             | <expr-binary>
             | <expr-prefix>
             | <expr-primary>
             | EXPR

/// Declarations.
<expr-decl>      ::= <decl-start> <decl-rest>
<decl-start>     ::= [ EXPORT ] IDENTIFIER ":"
<decl-rest>      ::= <type-function> <function-body>
                   | <type> [ "=" <expr> ]
                   | EXT <type-function>

/// Other expressions.
<expr-if>        ::= IF <expr> <expr> [ ELSE <expr> ]
<expr-while>     ::= WHILE <expr> <expr>
<expr-for>       ::= FOR <expr> [ "," ] <expr> [ "," ] <expr> <expr>
<expr-block>     ::= "{" { <expr> } "}"
<expr-lambda>    ::= <type-function> <function-body>
<expr-call>      ::= <expr> "(" { <expr> [ "," ] } ")"
<expr-cast>      ::= <expr> AS <type>
<expr-subs>      ::= <expr> "[" <expr> "]"
<expr-paren>     ::= "(" <expr> ")"
<expr-return>    ::= RETURN [ <expr> ]
<expr-literal>   ::= "[" { <expr> [ "," ] } "]"
<expr-prefix>    ::= <prefix> <expr>
<expr-binary>    ::= <expr> <binary> <expr>
<expr-primary>   ::= NUMBER | IDENTIFIER

/// Types.
<type>           ::= <type-base> | <type-pointer> | <type-derived> | <type-struct>
<type-pointer>   ::= "@" { "@" } ( IDENTIFIER | "(" <type> ")" )
<type-base>      ::= IDENTIFIER | INTEGER | BYTE | BOOL | VOID | ARBITRARY_INT
<type-struct>    ::= TYPE <struct-body>
<type-derived>   ::= <type-array> | <type-function>
<type-array>     ::= <type> "[" <expr> "]"
<type-function>  ::= <type> "(" { <param-decl> [ "," ]  } ")" <function-attrs>
<param-decl>     ::= <decl-start> <type>
<struct-body>    ::= "{" { <param-decl> } "}"

/// Miscellaneous.
<function-body>  ::= "=" <expr> | <expr-block>
<binary>         ::= /// All binary operators
<prefix>         ::= /// All unary prefix operators