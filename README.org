#+created: <2022-08-01 Mon>

* Lensor Compiler Collection

Now written in C++, LCC started as a compiler written in C for just one hobby language, ~Intercept~. Over the course of a few years, it has grown into a compiler collection, with a whole host of frontends created and maintained by the growing and thriving community.

** Implemented Languages

- Intercept (WIP)
- Laye (WIP)

In the future, we hope to support

- some of C
- YOUR language :)

** Usage

For convenience purposes, there is a single executable, ~lcc~, that can delegate between all of the different compilers in the collection. This is called the /compiler driver/, often shortened to just /driver/.

Running the driver executable with no arguments will display a usage message that contains compiler flags and options as well as command layout.

The driver uses file extension to determine which compiler to pass the source code to. ~lcc ./tst/intercept/byte.int~ will invoke the ~Intercept~ compiler, while ~lcc ./tst/laye/exit_code.laye~ will invoke the ~Laye~ compiler, for example.

** Building

Dependencies:

- [[https://cmake.org/][CMake >= 3.20]]

- Any C++ Compiler (We like [[https://gcc.gnu.org/][GCC]])

NOTE: If on Windows *and* using Visual Studio, see [[file:docs/VISUAL_STUDIO.org][this document]] instead.

First, generate a build tree using CMake.
#+begin_src shell
  cmake -B bld
#+end_src

Finally, build an executable from the build tree.
#+begin_src shell
  cmake --build bld
#+end_src

*** To build generated ~.s~ x86_64 ASM

To use external calls, link with appropriate libraries!

GNU Binutils:
#+begin_src shell
  as code.S -o code.o
  ld code.o -o code
#+end_src

GNU Compiler Collection
#+begin_src shell
  gcc code.S -o code
#+end_src

LLVM/Clang
#+begin_src shell
  clang code.S -o code --target=x86_64
#+end_src

*** To build generated ~.ll~ LLVM

Use LLVM's ~clang~ to compile the generated LLVM output into a library or executable.

#+begin_src shell
  clang code.ll -o code
#+end_src
