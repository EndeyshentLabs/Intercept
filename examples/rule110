putchar : ext integer(c : integer)

print_number_impl : integer(n : integer) {
  if n = 0 {
    0
  } else {
    print_number_impl(n / 10)
    putchar(n % 10 + 48)
  }
}

print_number : integer(n : integer) {
  if n = 0 {
    putchar(48)
  }
  print_number_impl(n)
  n
}

print_binary_number_impl : integer(n : integer) {
  if n = 0 {
    0
  } else {
    print_binary_number_impl(n >> 1)
    putchar((n & 1) + 48)
  }
}

print_binary_number : integer(n : integer) {
  if n = 0 {
    putchar(48)
  }
  print_binary_number_impl(n)
  n
}

rowcount : integer = 42
;; NOTE: Must be less than 64 (bit width of size_t)
colcount : integer = 32

state : integer = 1 | (1 << 8)

while rowcount {
  newstate : integer = state

  ;;print_number(rowcount)

  ;;putchar(58)

  ;; bitcount == column count
  bitcount : integer = colcount
  ;; left
  lbit : integer = 0
  ;; middle
  mbit : integer = 0
  ;; right
  rbit : integer = 0
  ;; iterator (TODO: should start at 1/2, right?)
  idx : integer = 1
  while idx < bitcount - 1 {
    lbit := state & (1 << (idx + 1))
    mbit := state & (1 << idx)
    rbit := state & (1 << (idx - 1))

    if lbit = 0 {
      ;; 0b0xx
      if mbit = 0 {
        ;; 0b00x
        if rbit > 0 {
          ;; 0b001
          newstate := newstate | (1 << idx)
        } else {
          ;; 0b000
          newstate := newstate & ~(1 << idx)
        }
      } else {
        ;; 0b01x
        ;; both 0b011 and 0b010 rules result in `1`
        newstate := newstate | (1 << idx)
      }
    } else {
      ;; 0b1xx
      if mbit = 0 {
        ;; 0b10x
        if rbit > 0 {
          ;; 0b101
          newstate := newstate | (1 << idx)
        } else {
          ;; 0b100
          newstate := newstate & ~(1 << idx)
        }
      } else {
        ;; 0b11x
        if rbit > 0 {
          ;; 0b111
          newstate := newstate & ~(1 << idx)
        } else {
          ;; 0b110
          newstate := newstate | (1 << idx)
        }
      }
    }

    idx := idx + 1
  }

  ;;print_binary_number(state)
  state := newstate
  ;;print_binary_number(state)

  idx := 0
  while idx < bitcount {
    if state & (1 << idx) {
      putchar(42)
    } else {
      putchar(32)
    }
    idx := idx + 1
  }

  putchar(10)
  rowcount := rowcount - 1
}

0
