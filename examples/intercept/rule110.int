;;; Main

state : i64 = 1

rowcount :: 42
;; NOTE: Must be less than bit width of "state" integer
colcount :: 32

while rowcount {
  display_state(state)
  state := calculate_state(state)
  rowcount := rowcount - 1
}


;;; Functions
display_state : void(state : i64) {
  idx :: 0
  while idx < colcount {
    putchar(
      if state & (1 << idx) 42 else 32
    )
    idx := idx + 1
  }
  putchar(10)
}

calculate_state : integer(state : i64) {
  newstate :: state

  for idx :: 1, idx < colcount - 1, idx := idx + 1 {
    bits :: (state & (0b111 << (idx - 1))) >> (idx - 1)
    if bits = 0b000
      newstate := newstate & ~(1 << idx)
    else if bits = 0b001
      newstate := newstate | (1 << idx)
    else if bits = 0b010
      newstate := newstate | (1 << idx)
    else if bits = 0b011
      newstate := newstate | (1 << idx)
    else if bits = 0b100
      newstate := newstate & ~(1 << idx)
    else if bits = 0b101
      newstate := newstate | (1 << idx)
    else if bits = 0b110
      newstate := newstate | (1 << idx)
    else newstate := newstate & ~(1 << idx)
  }

  newstate
}

;;; Externals

;; Print a character represented by `c` to stdout. Requires linking with `libc`.
putchar : ext void(c : integer)

0
