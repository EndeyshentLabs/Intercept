;;; Main

;; NOTE: Must be less than bit width of "state" integer
static colcount :: 32;

rowcount :: 42;
state : i64 = 1;

while rowcount != 0 do {
  display_state state;
  state := calculate_state state;
  rowcount := rowcount - 1;
};


;;; Functions
display_state : void(state : i64) {
  idx :: 0;
  while idx < colcount do {
    putchar if state & (1 << idx) != 0 then 42 else 32;
    idx := idx + 1;
  };
  putchar 10;
};

calculate_state : int(state : i64) {
  newstate :: state;

  for idx :: 1, idx < colcount - 1, idx := idx + 1 do {
    bits :: (state & (0b111 << (idx - 1))) >> (idx - 1);
    if bits = 0b000 then
      newstate := newstate & ~(1 << idx)
    else if bits = 0b001 then
      newstate := newstate | (1 << idx)
    else if bits = 0b010 then
      newstate := newstate | (1 << idx)
    else if bits = 0b011 then
      newstate := newstate | (1 << idx)
    else if bits = 0b100 then
      newstate := newstate & ~(1 << idx)
    else if bits = 0b101 then
      newstate := newstate | (1 << idx)
    else if bits = 0b110 then
      newstate := newstate | (1 << idx)
    else newstate := newstate & ~(1 << idx);
  };

  newstate;
};

;;; Externals

;; Print a character represented by `c` to stdout. Requires linking with `libc`.
extern putchar : void(c : int);

0;
