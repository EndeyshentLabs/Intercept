* Minimal Module Example

Sometimes modules can be a pain to understand. This example aims to be the absolutely minimal example of a module declaration and of a program that imports such module.

** Building

NOTE: All commands are assumed to be run from the base of the Intercept repository (/not/ from this subdirectory). If =intc= is not accessible via a directory in PATH environment variable, be sure to replace usages of it with the path to the executable (most likely =./bld/intc=).

First we compile the dependency of the program, the module ~Foo~.
#+begin_src sh
  intc examples/minimal_module/Foo.module.int -v -o examples/minimal_module/Foo.lib -t obj
#+end_src

Breakdown:
- ~-v~ :: Verbose; show a message indicating where output code was generated.
- ~-o examples/minimal_module/Foo.lib~ :: Set output filepath (code generated will be stored here)
- ~-t obj~ :: Set output target format to the default object file format

After running this command, ~Foo.lib~ should contain both module ~Foo~'s code and the type-safety metadata that will be read by the compiler when importing the module.

Now we compile the program.
#+begin_src sh
  intc examples/minimal_module/program.int -v -o examples/minimal_module/program.lib -t obj -L examples/minimal_module
#+end_src

Breakdown:
- ~-L examples/minimal_module~ :: Library path: search for modules within this directory (may pass many ~-L~'s). Here, this lets the compiler find ~Foo.lib~ to perform proper type checking.

After both the module dependency and the program are compiled, we may link them together along with the system binaries the easiest by using a compiler driver like ~gcc~.
#+begin_src sh
  gcc examples/minimal_module/Foo.lib examples/minimal_module/program.lib -o program
#+end_src

Voila! There you have it :)
