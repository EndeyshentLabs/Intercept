;; libc Declarations
puts: ext void(str: @byte)

;; SDL2 Declarations
SDL_Window :> type {}
SDL_Surface :> type {}
SDL_Event :> type {
  data: byte[128]
}
SDL_EVENT_QUIT: u32 =  0x100
SDL_PollEvent: ext integer(event: @SDL_Event)
SDL_INIT_VIDEO: u32 = 0x20
SDL_WINDOWPOS_UNDEFINED: s32 = 0x1FFF0000
SDL_Init: ext s32(flags: u32)
SDL_Quit: ext void()
SDL_GetError: ext @byte()
SDL_CreateWindow: ext @SDL_Window(
  name: @byte
  x: s32
  y: s32
  w: s32
  h: s32
  flags: u32
)
SDL_DestroyWindow: ext void(w: @SDL_Window)

window: @SDL_Window

if SDL_Init(SDL_INIT_VIDEO) != 0 {
  puts("Failed to initialise SDL"[0])
  puts(SDL_GetError())
  return 1;
}

;; SDL2 initalised; create window
window := SDL_CreateWindow(
  "SDL Tutorial"[0],
  SDL_WINDOWPOS_UNDEFINED,
  SDL_WINDOWPOS_UNDEFINED,
  640, 480,
  0
)
if window = 0 as @SDL_Window {
  puts("Window could not be created!\n"[0])
  puts(SDL_GetError())
  return 2;
}

;; SDL2 initialised, window created; enter event loop
event: SDL_Event
quit: integer = 0
while quit = 0 {
  while SDL_PollEvent(&event) {
    etype :: @(event.data[0] as @u32)
    if etype = SDL_EVENT_QUIT {
      quit := 1
    }
  }
}

SDL_DestroyWindow(window)

SDL_Quit()
0
