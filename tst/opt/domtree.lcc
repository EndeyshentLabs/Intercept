; R %lcc --passes=print-dom %s

; p re off

; * digraph convoluted {
; +     0 [label="bb0"];
; +     1 [label="bb1"];
; +     2 [label="bb2"];
; +     3 [label="bb3"];
; +     4 [label="bb4"];
; +     5 [label="bb5"];
; +     6 [label="bb6"];
; +     0 -> 0;
; +     0 -> 1;
; +     0 -> 2;
; +     1 -> 3;
; +     0 -> 4;
; +     2 -> 5;
; +     3 -> 6;
; + }
convoluted : void():
  bb0:
    %0 = alloca i64
    store i64 12 into %0
    %1 = load i64 from %0
    %2 = eq i64 %1, 12
    branch on %2 to %bb1 else %bb2
  bb1:
    %3 = load i64 from %0
    %4 = ne i64 %3, 13
    branch on %4 to %bb3 else %bb4
  bb2:
    %5 = load i64 from %0
    %6 = ne i64 %5, 13
    branch on %6 to %bb5 else %bb4
  bb3:
    %7 = load i64 from %0
    %8 = ne i64 %7, 13
    branch on %8 to %bb1 else %bb6
  bb4:
    %9 = load i64 from %0
    %10 = ne i64 %9, 13
    branch on %10 to %bb4 else %bb4
  bb5:
    return
  bb6:
    return

; * digraph phis {
; +     0 [label="bb0"];
; +     1 [label="bb1"];
; +     2 [label="bb2"];
; +     3 [label="bb3"];
; +     0 -> 0;
; +     0 -> 1;
; +     0 -> 2;
; +     0 -> 3;
; + }
phis : i32(i1 %0):
  bb0:
    branch on %0 to %bb1 else %bb2
  bb1:
    %1 = add i32 4, 5
    %2 = sub i32 %1, 1
    branch on %0 to %bb2 else %bb3
  bb2:
    %3 = phi i32, [%bb0 : 4], [%bb1 : %1]
    %4 = phi i32, [%bb0 : 5], [%bb1 : %2]
    %5 = add i32 %3, 1
    branch to %bb3
  bb3:
    %6 = phi i32, [%bb2 : %5], [%bb1 : %1]
    %7 = phi i32, [%bb2 : %4], [%bb1 : %2]
    %8 = mul i32 %6, %7
    return i32 %8