; R %lcc --passes=print-dom %s

; p re off

; * digraph convoluted {
; +     0 [label="bb0"];
; +     1 [label="bb1"];
; +     2 [label="bb2"];
; +     3 [label="bb3"];
; +     4 [label="bb4"];
; +     5 [label="bb5"];
; +     6 [label="bb6"];
; +     0 -> 0;
; +     0 -> 1;
; +     0 -> 2;
; +     1 -> 3;
; +     0 -> 4;
; +     2 -> 5;
; +     3 -> 6;
; + }
convoluted : void():
    bb0:
        %0 = alloca i64
        store i64 12 into %0
        %1 = load i64 from %0
        %2 = eq i64 %1, 12
        branch on %2 to %bb1 else %bb2
    bb1:
        %3 = load i64 from %0
        %4 = ne i64 %3, 13
        branch on %4 to %bb3 else %bb4
    bb2:
        %5 = load i64 from %0
        %6 = ne i64 %5, 13
        branch on %6 to %bb5 else %bb4
    bb3:
        %7 = load i64 from %0
        %8 = ne i64 %7, 13
        branch on %8 to %bb1 else %bb6
    bb4:
        %9 = load i64 from %0
        %10 = ne i64 %9, 13
        branch on %10 to %bb0 else %bb0
    bb5:
        return
    bb6:
        return
