// R %lcc --ir %s

// d b [a-zA-Z0-9\.]+
// d t %[0-9]+
// d f _L[a-zA-Z0-9_]+

// * foo : internal layecc void():
// +  $b:
// +    return
foreign void foo() { }

// * guard : internal layecc i64(i64 %0):
// +   (?<guard_entry>$b):
// +     (?<guard_x>$t) = alloca i64
// +     store i64 %0 into $guard_x
// +     (?<guard_x0>$t) = load i64 from $guard_x
// +     (?<guard_cond>$t) = slt i64 $guard_x0, 10
// +     branch on $guard_cond to %(?<guard_pass>$b) else %(?<guard_fail>$b)
// +   $guard_pass:
// +     (?<guard_x_ret>$t) = load i64 from $guard_x
// +     return i64 $guard_x_ret
// +   $guard_fail:
// +     return i64 10
foreign int guard(int x) {
    if (x < 10) return x;
    return 10;
}

// * early_return : internal layecc void(i64 %0):
// +   (?<early_return_entry>$b):
// +     (?<early_return_x>$t) = alloca i64
// +     store i64 %0 into $early_return_x
// +     (?<early_return_x0>$t) = load i64 from $early_return_x
// +     (?<early_return_cond>$t) = sgt i64 $early_return_x0, 20
// +     branch on $early_return_cond to %(?<early_return_pass>$b) else %(?<early_return_exit>$b)
// +   $early_return_pass:
// +     return 
// +   $early_return_exit:
// +     call @foo ()
// +     return
foreign void early_return(int x) {
    if (x > 20) return;
    foo();
}

// * conditional_assign : internal layecc i64(i64 %0):
// +  (?<conditional_assign_entry>$b):
// +    (?<conditional_assign_condition>$t) = alloca i64
// +    store i64 %0 into $conditional_assign_condition
// +    (?<conditional_assign_x>$t) = alloca i64
// +    store i64 10 into $conditional_assign_x
// +    (?<conditional_assign_condition0>$t) = load i64 from $conditional_assign_condition
// +    (?<conditional_assign_cond>$t) = ne i64 $conditional_assign_condition0, 0
// +    branch on $conditional_assign_cond to %(?<conditional_assign_pass>$b) else %(?<conditional_assign_exit>$b)
// +  $conditional_assign_pass:
// +    store i64 20 into $conditional_assign_x
// +    branch to %$conditional_assign_exit
// +  $conditional_assign_exit:
// +    (?<conditional_assign_x1>$t) = load i64 from $conditional_assign_x
// +    return i64 $conditional_assign_x1
foreign int conditional_assign(bool condition) {
    int x = 10;
    if (condition) x = 20;
    return x;
}

// * ifelse_returns : internal layecc i64(i64 %0):
// +   (?<ifelse_returns_entry>$b):
// +     (?<ifelse_returns_x>$t) = alloca i64
// +     store i64 %0 into $ifelse_returns_x
// +     (?<ifelse_returns_x0>$t) = load i64 from $ifelse_returns_x
// +     (?<ifelse_returns_cond>$t) = slt i64 $ifelse_returns_x0, 10
// +     branch on $ifelse_returns_cond to %(?<ifelse_returns_pass>$b) else %(?<ifelse_returns_fail>$b)
// +   $ifelse_returns_pass:
// +     (?<ifelse_returns_x_ret>$t) = load i64 from $ifelse_returns_x
// +     return i64 $ifelse_returns_x_ret
// +   $ifelse_returns_fail:
// +     return i64 10
foreign int ifelse_returns(int x) {
    if (x < 10) return x;
    else return 10;
}
