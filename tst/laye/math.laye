// R %lcc --ir %s
// d b [a-zA-Z0-9\.]+
// d t %[0-9]+
// d f _L[a-zA-Z0-9_]+

// * $f : void():
// +   $b:
// +     (?<va>$t) = alloca i64
// +     (?<va_temp>$t) = add i64 2, 3
// +     store i64 $va_temp into $va
// +     (?<vb>$t) = alloca i64
// +     (?<va2>$t) = load i64 from $va
// +     (?<vb_temp>$t) = mul i64 $va2, 4
// +     store i64 $vb_temp into $vb
// +     (?<vc>$t) = alloca i64
// +     (?<va3>$t) = load i64 from $va
// +     (?<vb2>$t) = load i64 from $vb
// +     (?<vc_temp1>$t) = s.div i64 $vb2, 2
// +     (?<vc_temp2>$t) = add i64 $va3, $vc_temp1
// +     store i64 $vc_temp2 into $vc
// +     (?<vd>$t) = alloca i64
// +     (?<vc2>$t) = load i64 from $vc
// +     (?<vd_temp1>$t) = sub i64 $vc2, 3
// +     (?<vd_temp2>$t) = eq i64 $vd_temp1, 12
// +     store i1 $vd_temp2 into $vd
// +     return
void do_math()
{
    int  a = 2 + 3;
    int  b = a * 4;
    int  c = a + b / 2;
    bool d = c - 3 == 12;
}
