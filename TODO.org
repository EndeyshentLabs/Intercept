#+title: LCC TODO
#+author: Lens_r

* ~lcc~, Driver

** TODO Add option to override input language
[2023-12-13 Wed 11:02]

* Intercept, Language

** TODO Packed Structs called "Cereals"
[2023-12-09 Sat 17:39]

Basically, a packed struct is going to be an entirely separate type
kind, like struct, enum, etc.

#+begin_src int
  foo : cereal {
    x :u8;
    y :u16;
  }
#+end_src

The size of ~foo~ above would be 24 bits, and the layout is guaranteed.

The use of cereals would be for serialisation and deserialisation,
where you sometimes need exact bit or byte types that don't necessarily
follow all padding rules and such.

** TODO ~:~ unary prefix operator takes in a type and returns a type expression
[2023-12-09 Sat 18:14]

This is basically just to make parsing easier, as expressions can't
start with a type by itself without making things ambiguous.

I don't necessarily know /how/ I'll be using this yet, but I know this
is good syntax, as it is consistent with how types are written in
declarations.

** TODO ~#~ unary prefix operator: "sizeof"
[2023-12-09 Sat 18:17]

#+begin_src int
  #:u8 ;; 1
  #:u8[42] ;; 42

  something : struct {
    x :u8;
    y :u8;
  }
  #:something ;; 2

  foo : something;
  #foo ;; 2
#+end_src

** TODO Error on non-hygienic declarations when defining a macro
[2023-12-09 Sat 18:22]

Whoever wrote the lexer and parser absolutely butchered macros. I
already fixed ~defines~, I'm pretty sure, but it wasn't even erroring
when it should, so we aren't checking for hygienic expansions :(.

** TODO An assignment is an explicit typing of the rhs as much as a declaration is of the left
[2023-12-13 Wed 16:24]

This means we should treat the right hand side of an assignment, in
code like the following,
#+begin_src int
  x : u32 = 69
  x := -1
#+end_src
as an explicit cast of the expression's result type to the left hand
side type, should it be convertible.

An /explicit/ cast means the programmer specified they want it to
happen. I *WANT* an assignment to happen if I write it, and I shouldn't
be forced to write `as typeof x` or similar just to make it work.
